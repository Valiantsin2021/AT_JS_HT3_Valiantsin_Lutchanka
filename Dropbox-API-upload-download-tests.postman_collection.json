{
	"info": {
		"_postman_id": "9a3b310c-8828-4db2-a2e1-5712c75dc6e0",
		"name": "Dropbox-API-upload/download-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19372436"
	},
	"item": [
		{
			"name": "Get token",
			"item": [
				{
					"name": "Get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.environment.get('checkStatusOk'))();\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Check response body has key 'access_token'\", function () {\r",
									"    pm.expect(response).to.include.key('access_token');\r",
									"});\r",
									"\r",
									"pm.environment.set('token', response.access_token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{appSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{appKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh_token",
									"value": "{{refresh}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.dropbox.com/oauth2/token",
							"protocol": "https",
							"host": [
								"api",
								"dropbox",
								"com"
							],
							"path": [
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "Authorization tests",
					"item": [
						{
							"name": "User authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{authCheckBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authEndpoint}}/check/user",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"check",
										"user"
									],
									"query": [
										{
											"key": "query",
											"value": "foo",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check app",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{appSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{appKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{authCheckBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{authEndpoint}}/check/app",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"check",
										"app"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(`Check response header 'Content-Type' and its value is '${pm.environment.get('Content-Type')}'`, function () {",
									"    pm.response.to.have.header(\"Content-Type\", pm.environment.get('Content-Type'));",
									"});",
									"",
									"pm.test(\"Check response header 'Content-Security-Policy' and its value\", function () {",
									"    pm.response.to.have.header(\"Content-Security-Policy\", 'sandbox');",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Check response body has key with value\", function () {",
									"    pm.expect(response.result).to.eql(pm.environment.get('test'));",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Upload file tests",
					"item": [
						{
							"name": "File upload test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const VariablesData = pm.environment.get('VariablesData')\r",
											"\r",
											"pm.test(`Check 'Strict-Transport-Security' response header value is '${pm.environment.get('Strict-Transport-Security')}'`, function () {\r",
											"    pm.response.to.have.header(\"Strict-Transport-Security\", pm.environment.get('Strict-Transport-Security'));\r",
											"});\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Check response has key 'name' with value equal to uploaded file name\", function () {\r",
											"    pm.expect(response.name).to.eql(VariablesData.fileName);\r",
											"});\r",
											"\r",
											"pm.test(`Check response keys length is equal ${VariablesData.uploadResponseLength}`, function () {\r",
											"    pm.expect(Object.keys(response).length).to.eql(+VariablesData.uploadResponseLength);\r",
											"});\r",
											"\r",
											"pm.test(`Check response keys are present`, function () {\r",
											"    const keys = VariablesData.metadata.split(',');\r",
											"    keys.forEach((key,i) => {\r",
											"        pm.expect(Object.keys(response)[i]).to.equal(key);\r",
											"    })\r",
											"});\r",
											"\r",
											"pm.environment.set('metadataValues', Object.values(response))\r",
											"\r",
											"pm.test(\"Check response 'is_downloadable' value\", function () {\r",
											"    pm.expect(response.is_downloadable).to.eql(true);\r",
											"});\r",
											"setTimeout(function(){}, 2000);\r",
											"\r",
											"pm.test(\"Validate response json schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"uploadResponseSchema\"))\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": ['name', 'path_lower', 'path_display', 'id', 'client_modified', 'server_modified', 'rev', 'size', 'is_downloadable', 'content_hash'],\r",
											"    \"properties\":  {\r",
											"        \"name\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"path_lower\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"path_display\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"id\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"client_modified\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"server_modified\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"rev\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"size\": {\r",
											"            \"type\": \"number\",\r",
											"        },\r",
											"        \"is_downloadable\": {\r",
											"            \"type\": \"boolean\",\r",
											"        },\r",
											"        \"content_hash\": {\r",
											"            \"type\": \"string\",\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.environment.set('uploadResponseSchema', schema)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Dropbox-API-Arg",
										"value": "{{upload-DropBox-API-Arg}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "{{upload-Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "text.txt"
									}
								},
								"url": {
									"raw": "{{filesEndpoint}}/files/upload",
									"host": [
										"{{filesEndpoint}}"
									],
									"path": [
										"files",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search uploaded file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const VariablesData = pm.environment.get('VariablesData')\r",
											"\r",
											"pm.test(`Check response header 'Content-Security-Policy' value is '${pm.environment.get('Content-Security-Policy')}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Security-Policy\", pm.environment.get('Content-Security-Policy'));\r",
											"});\r",
											"pm.test(`Check response header 'Content-Type' and its value is '${pm.environment.get('Content-Type')}'`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", pm.environment.get('Content-Type'));\r",
											"});\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(`Check response keys length is equal ${VariablesData.searchMatchesLength}`, function () {\r",
											"    pm.expect(response.matches.length).to.eql(+VariablesData.searchMatchesLength);\r",
											"});\r",
											"\r",
											"pm.test(`Check response key 'has_more' value equal to 'false'`, function () {\r",
											"    pm.expect(response.has_more).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response json schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"searchUploadedResponseSchema\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": ['has_more', 'matches'],\r",
											"    \"properties\":  {\r",
											"        \"has_more\": {\r",
											"            \"type\": \"boolean\",\r",
											"        },\r",
											"        \"matches\": {\r",
											"            \"type\": \"array\",\r",
											"            \"minItems\": 1,\r",
											"            \"maxItems\": 5,\r",
											"            \"items\": [\r",
											"                    {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"match_type\": {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \".tag\": {\r",
											"                                \"type\": \"string\",\r",
											"                                },\r",
											"                            },\r",
											"                        }\r",
											"                    }    \r",
											"                    },\r",
											"                    {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"metadata\": {\r",
											"                            \".tag\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"client_modified\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"content_hash\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"id\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"is_downloadable\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"name\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"path_display\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"path_lower\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"rev\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"server_modified\": {\r",
											"                                \"type\": \"string\",\r",
											"                            },\r",
											"                            \"sharing_info\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"properties\": {\r",
											"                                    \"modified_by\": {\r",
											"                                        \"type\": \"string\",\r",
											"                                    },\r",
											"                                    \"parent_shared_folder_id\": {\r",
											"                                        \"type\": \"string\",\r",
											"                                    },\r",
											"                                    \"read_only\": {\r",
											"                                        \"type\": \"boolean\",\r",
											"                                    }\r",
											"                                },\r",
											"                            \"size\": {\r",
											"                                \"type\": \"number\",\r",
											"                            }\r",
											"                        }\r",
											"                        }\r",
											"                    },\r",
											"                },\r",
											"            ]\r",
											"        },\r",
											"    }\r",
											"}\r",
											"pm.environment.set('searchUploadedResponseSchema', schema)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"query\": \"{{text.txt}}\"\r\n}s"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/search_v2",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"search_v2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Get File Metadata tests",
					"item": [
						{
							"name": "Get uploaded file via search endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const VariablesData = pm.environment.get('VariablesData')\r",
											"\r",
											"const response = pm.response.json();\r",
											"const metadata = response.matches[0].metadata.metadata\r",
											"const metadataValues = pm.environment.get('metadataValues')\r",
											"\r",
											"pm.test(\"Check metadadta has key 'name' with value equal to uploaded file name\", function () {\r",
											"    pm.expect(metadata.name).to.eql(VariablesData.fileName);\r",
											"});\r",
											"\r",
											"pm.test(`Check response keys length is ${VariablesData.searchMatchesLength}`, function () {\r",
											"    pm.expect(response.matches.length).to.eql(+VariablesData.searchMatchesLength);\r",
											"});\r",
											"\r",
											"pm.test(`Check metadata 'name' key has value '${metadataValues[0]}'`, function () {\r",
											"    pm.expect(metadata.name).to.equal(metadataValues[0]);\r",
											"});\r",
											"\r",
											"pm.test(`Check metadata 'id' key has value '${metadataValues[3]}'`, function () {\r",
											"    pm.expect(metadata.id).to.equal(metadataValues[3]);\r",
											"});\r",
											"\r",
											"pm.test(`Check metadata 'content_hash' key has value '${metadataValues[metadataValues.length - 1]}'`, function () {\r",
											"    pm.expect(metadata.content_hash).to.equal(metadataValues[metadataValues.length - 1]);\r",
											"});\r",
											"\r",
											"pm.test(`Check metadata 'is_downloadable' key has value '${metadataValues[8]}'`, function () {\r",
											"    pm.expect(metadata.is_downloadable).to.equal(metadataValues[8]);\r",
											"});\r",
											"\r",
											"pm.test(`Check metadata 'size' key has value '${metadataValues[7]}'`, function () {\r",
											"    pm.expect(metadata.size).to.equal(metadataValues[7]);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response json schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"searchUploadedResponseSchema\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"query\": \"{{text.txt}}\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/search_v2",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"search_v2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get uploaded file metadata via metadata endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const VariablesData = pm.environment.get('VariablesData')\r",
											"\r",
											"pm.test(`Check response keys length is equal ${VariablesData.metadataResponseLength}`, function () {\r",
											"    pm.expect(Object.keys(response).length).to.eql(+VariablesData.metadataResponseLength);\r",
											"});\r",
											"\r",
											"pm.test(`Check response keys values are equal ${pm.environment.get('metadataValues')}`, function () {\r",
											"    pm.expect(Object.values(response).slice(1)).to.eql(pm.environment.get('metadataValues'));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response json schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"metadataResponseSchema\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": ['.tag', 'name', 'path_lower', 'path_display', 'id', 'client_modified', 'server_modified', 'rev', 'size', 'is_downloadable', 'content_hash'],\r",
											"    \"properties\":  {\r",
											"        \".tag\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"name\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"path_lower\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"path_display\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"id\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"client_modified\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"server_modified\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"rev\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"size\": {\r",
											"            \"type\": \"number\",\r",
											"        },\r",
											"        \"is_downloadable\": {\r",
											"            \"type\": \"boolean\",\r",
											"        },\r",
											"        \"content_hash\": {\r",
											"            \"type\": \"string\",\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.environment.set('metadataResponseSchema', schema)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"{{path}}\", \r\n    \"include_media_info\": false, \r\n    \"include_deleted\": false, \r\n    \"include_has_explicit_shared_members\": false\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/get_metadata",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"get_metadata"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(`Check response header 'Content-Type' and its value is '${pm.environment.get('Content-Type')}'`, function () {",
									"    pm.response.to.have.header(\"Content-Type\", pm.environment.get('Content-Type'));",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Delete file tests",
					"item": [
						{
							"name": "Delete uploaded file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const VariablesData = pm.environment.get('VariablesData')\r",
											"\r",
											"const response = pm.response.json();\r",
											"const metadata = response.metadata;\r",
											"\r",
											"pm.test(`Check response keys length is equal ${VariablesData.metadataResponseLength}`, function () {\r",
											"    pm.expect(Object.keys(metadata).length).to.eql(+VariablesData.metadataResponseLength);\r",
											"});\r",
											"\r",
											"pm.test(`Check response keys values are equal ${pm.environment.get('metadataValues')}`, function () {\r",
											"    pm.expect(Object.values(metadata).slice(1)).to.eql(pm.environment.get('metadataValues'));\r",
											"});\r",
											"pm.test(\"Validate response json schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(pm.environment.get(\"deleteSchema\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"required\": ['metadata'],\r",
											"        \"properties\": {\r",
											"            \"metadata\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \".tag\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                     \"name\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                     \"path_lower\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"path_display\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"id\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"client_modified\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"server_modified\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"rev\": {\r",
											"                        \"type\": \"string\",\r",
											"                    },\r",
											"                    \"size\": {\r",
											"                        \"type\": \"number\",\r",
											"                    },\r",
											"                    \"is_downloadable\": {\r",
											"                        \"type\": \"boolean\",\r",
											"                    },\r",
											"                    \"content_hash\": {\r",
											"                        \"type\": \"string\",\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"}\r",
											"pm.environment.set('deleteSchema', schema)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"{{path}}\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/delete_v2",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"delete_v2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(`Check response header 'Content-Type' and its value is '${pm.environment.get('Content-Type')}'`, function () {",
									"    pm.response.to.have.header(\"Content-Type\", pm.environment.get('Content-Type'));",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"eval(pm.environment.get('checkStatusOk'))();"
						]
					}
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "wrong endpoint",
					"item": [
						{
							"name": "File upload test wrong endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Dropbox-API-Arg",
										"value": "{{upload-API-Arg}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "{{upload-Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "text.txt"
									}
								},
								"url": {
									"raw": "{{filesEndpoint}}/files/upload/1",
									"host": [
										"{{filesEndpoint}}"
									],
									"path": [
										"files",
										"upload",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search uploaded file wrong endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"query\": \"{{fileName}}\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/search_v1",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"search_v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get uploaded file metadata wrong endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"{{path}}\", \r\n    \"include_media_info\": false, \r\n    \"include_deleted\": false, \r\n    \"include_has_explicit_shared_members\": false\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/get_metadat",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"get_metadat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete uploaded file wrong endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"{{path}}\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/delete_v1",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"delete_v1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "wrong request body",
					"item": [
						{
							"name": "Search uploaded file wrong request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quer\": \"{{fileName}}\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/search_v2",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"search_v2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get uploaded file metadata wrong body 'path' key value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.environment.get('checkStatusError'))();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"/api\", \r\n    \"include_media_info\": false, \r\n    \"include_deleted\": false, \r\n    \"include_has_explicit_shared_members\": false\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/get_metadata",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"get_metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete uploaded file wrong response body 'path' key value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.environment.get('checkStatusError'))();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"path\": \"/api\"\r\n}"
								},
								"url": {
									"raw": "{{authEndpoint}}/files/delete_v2",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"files",
										"delete_v2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "File upload test wrong Header 'Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Dropbox-API-Arg",
								"value": "{{upload-DropBox-API-Arg}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "{{upload-Content-Type}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "text.txt"
							}
						},
						"url": {
							"raw": "{{filesEndpoint}}/files/upload",
							"host": [
								"{{filesEndpoint}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repeat delete uploaded file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.environment.get('checkStatusError'))();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"path\": \"{{path}}\"\r\n}"
						},
						"url": {
							"raw": "{{authEndpoint}}/files/delete_v2",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"files",
								"delete_v2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const VariablesData = pm.environment.get('VariablesData')",
							"",
							"pm.test(`Check upload file status message to be one of ${VariablesData.errorStatusMsg.split(',')}`, function () {",
							"    pm.expect(pm.response.status).to.be.oneOf(VariablesData.errorStatusMsg.split(','));",
							"});",
							"",
							"pm.test(\"Check upload file status code is one of [400, 404, 409]\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 409]);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const options = {",
					"        statusOk:'OK',",
					"        errorResponse: 'error_summary,error',",
					"        errorStatusMsg: 'Bad Request,Conflict,Not Found',",
					"        uploadResponseLength: 10,",
					"        metadataResponseLength: 11,",
					"        searchMatchesLength: 1,",
					"        fileName: 'text.txt',",
					"        metadata: 'name,path_lower,path_display,id,client_modified,server_modified,rev,size,is_downloadable,content_hash'",
					"    }",
					"class VariablesData {",
					"    constructor(options) {",
					"        this.statusOk = options.statusOk",
					"        this.errorResponse = options.errorResponse",
					"        this.errorStatusMsg = options.errorStatusMsg",
					"        this.uploadResponseLength = options.uploadResponseLength",
					"        this.metadataResponseLength = options.metadataResponseLength",
					"        this.searchMatchesLength = options.searchMatchesLength",
					"        this.fileName = options.fileName",
					"        this.metadata = options.metadata",
					"    }",
					"    testOk() {",
					"        const checkStatusOk = () => {",
					"            pm.test(\"Check response status code is 200\", function () {",
					"                pm.response.to.have.status(200);",
					"            });",
					"            const VariablesData = pm.environment.get('VariablesData')",
					"            pm.test(`Check upload file status message to be '${VariablesData.statusOk}'`, function () {",
					"                pm.expect(pm.response.status).to.equal(VariablesData.statusOk);",
					"            });",
					"        }",
					"        return pm.environment.set('checkStatusOk', checkStatusOk.toString())",
					"",
					"    }",
					"    testError() {",
					"        const checkStatusError = () => {",
					"        const response = pm.response.json();",
					"        const VariablesData = pm.environment.get('VariablesData')",
					"        pm.test(`Check response has error keys '${VariablesData.errorResponse.split(',')}'`, function () {",
					"            pm.expect(response).to.have.keys(VariablesData.errorResponse.split(','));",
					"            });",
					"        }",
					"        return pm.environment.set('checkStatusError', checkStatusError.toString())",
					"    }",
					"}",
					"",
					"const variables = new VariablesData(options);",
					"pm.environment.set('VariablesData', variables);",
					"console.log(variables.statusOk)",
					"variables.testOk();",
					"variables.testError();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Check response time is less than 3000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	]
}